{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["uiConfig","signInFlow","callbacks","signInSuccessWithAuthResult","signInOptions","firebase","auth","GoogleAuthProvider","PROVIDER_ID","LoggedOutTemplate","style","marginTop","transform","firebaseAuth","user","a","firestore","collection","add","owner","uid","name","displayName","activeTask","deck","created","Timestamp","now","game","doc","set","window","location","search","id","CreateGameForm","useCollection","orderBy","limit","games","margin","onClick","createGame","docs","map","className","data","toDate","toLocaleString","average","nums","length","reduce","b","ScoreState","members","scores","scoreData","revealed","display","flexDirection","width","fontSize","isMe","fontWeight","marginRight","Math","round","Object","values","filter","score","Game","gameDoc","slice","useDocument","gameLoading","tasks","tasksLoading","useState","newTask","setNewTask","membersLoading","points","setPoints","ticket","setTicket","allScores","allScoresLoading","activeTaskId","find","task","taskIndex","findIndex","console","log","backgroundColor","color","ref","merge","placeholder","onChange","event","value","onKeyPress","e","key","currentTarget","idx","document","phabricatorGetEpic","pattern","type","checkValidity","tickets","t","fields","background","height","padding","card","disabled","phabricatorSetPoints","match","p","parseInt","ticketId","minHeight","App","useAuthState","gameId","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialised","initFirebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8935d6e9.chunk.js","sourcesContent":["import \"./App.css\";\nimport firebase from \"firebase\";\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { useCollection, useDocument } from \"react-firebase-hooks/firestore\";\nimport { StyledFirebaseAuth } from \"react-firebaseui\";\nimport { useState } from \"react\";\n\n// Configure FirebaseUI.\nconst uiConfig = {\n  signInFlow: \"popup\",\n  callbacks: {\n    // Avoid redirects after sign-in.\n    signInSuccessWithAuthResult: () => false,\n  },\n  signInOptions: [firebase.auth.GoogleAuthProvider.PROVIDER_ID],\n};\n\nexport function LoggedOutTemplate() {\n  return (\n    <div style={{ marginTop: \"50vh\", transform: \"translateY(-100%)\" }}>\n      <h1>Planning Poker</h1>\n      <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={firebase.auth()} />\n    </div>\n  );\n}\n\nasync function createGame(user) {\n  const game = await firebase\n    .firestore()\n    .collection(\"game\")\n    .add({\n      owner: user.uid,\n      name: `${user.displayName}'s Planning Poker`,\n      activeTask: null,\n      deck: [1, 2, 3, 5, 8, 13, 21],\n      created: firebase.firestore.Timestamp.now(),\n    });\n  game.collection(\"members\").doc(user.uid).set({\n    name: user.displayName,\n  });\n  window.location.search = game.id;\n}\n\nexport function CreateGameForm({ user }) {\n  const [games] = useCollection(\n    firebase.firestore().collection(\"game\").orderBy(\"created\", \"desc\").limit(10)\n  );\n  return (\n    <div style={{ margin: \"auto\" }}>\n      <h1>Welcome, {user.displayName}!</h1>\n      <button onClick={() => createGame(user)}>Start a new game</button>\n      <h2>Join Game</h2>\n      <div>\n        {games\n          ? games.docs.map((game) => (\n              <div\n                onClick={() => (window.location.search = game.id)}\n                className=\"GameEntry\"\n              >\n                {game.data().name} (\n                {game.data().created.toDate().toLocaleString()})\n              </div>\n            ))\n          : null}\n      </div>\n    </div>\n  );\n}\n\nfunction average(nums) {\n  if (!nums.length) {\n    return 0;\n  }\n  return nums.reduce((a, b) => a + b) / nums.length;\n}\n\nfunction ScoreState({ game, user, activeTask, members, scores }) {\n  const scoreData = (scores ? scores.data() : null) || {};\n  const revealed = activeTask.data().revealed;\n  if (!members) {\n    return;\n  }\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        width: \"20vw\",\n        fontSize: \"18px\",\n      }}\n    >\n      <div>\n        {members.docs.map((doc) => {\n          const isMe = user.uid === doc.id;\n          return (\n            <div\n              style={{\n                ...(isMe ? { fontWeight: \"bold\" } : {}),\n                ...{ margin: \"8px 12px\", display: \"flex\" },\n              }}\n            >\n              <div style={{ marginRight: \"auto\" }}>{doc.data().name} </div>\n              <div>\n                {isMe && scoreData\n                  ? scoreData[user.uid]\n                  : revealed\n                  ? scoreData[doc.id]\n                  : scoreData[doc.id]\n                  ? \"✔️\"\n                  : \"\"}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n      <div>\n        {revealed ? (\n          <>\n            Average:{\" \"}\n            {Math.round(\n              average(Object.values(scoreData).filter((score) => score !== \"?\"))\n            )}\n          </>\n        ) : (\n          <>\n            {Object.values(scoreData).length}/{members.docs.length} Responses\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport function Game({ user }) {\n  const gameDoc = firebase\n    .firestore()\n    .collection(\"game\")\n    .doc(window.location.search.slice(1));\n  const [game, gameLoading] = useDocument(gameDoc);\n  const [tasks, tasksLoading] = useCollection(\n    gameDoc.collection(\"tasks\").orderBy(\"idx\")\n  );\n  const [newTask, setNewTask] = useState(\"\");\n  const [members, membersLoading] = useCollection(\n    gameDoc.collection(\"members\")\n  );\n  const [points, setPoints] = useState();\n  const [ticket, setTicket] = useState(\"\");\n  const [allScores, allScoresLoading] = useCollection(\n    gameDoc.collection(\"scores\")\n  );\n  if (gameLoading || tasksLoading || membersLoading) {\n    return null;\n  }\n  const activeTaskId = game.data().activeTask;\n  const activeTask =\n    activeTaskId && !tasksLoading\n      ? tasks.docs.find((task) => task.id === activeTaskId)\n      : null;\n  const scores = allScoresLoading\n    ? null\n    : allScores.docs.find((doc) => doc.id === activeTaskId);\n\n  const taskIndex = tasks.docs.findIndex((task) => task.id === activeTaskId);\n  console.log(ticket);\n  if (members.docs.find((doc) => doc.id === user.uid)) {\n    return (\n      <div style={{ display: \"flex\", backgroundColor: \"#f0f0f0\" }}>\n        <div style={{ width: \"20vw\" }}>\n          <h1>Tasks</h1>\n          <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n            {tasks\n              ? tasks.docs.map((doc) => (\n                  <div\n                    style={\n                      activeTaskId === doc.id\n                        ? { fontWeight: \"bold\" }\n                        : { color: \"grey\" }\n                    }\n                    onClick={() => {\n                      game.ref.set({ activeTask: doc.id }, { merge: true });\n                    }}\n                    className=\"TaskEntry\"\n                  >\n                    {doc.data().name}\n                  </div>\n                ))\n              : null}\n            <input\n              placeholder=\"+ Add Task\"\n              onChange={(event) => setNewTask(event.value)}\n              value={newTask}\n              onKeyPress={async (e) => {\n                if (e.key === \"Enter\") {\n                  await gameDoc.collection(\"tasks\").add({\n                    name: e.currentTarget.value,\n                    revealed: false,\n                    idx: tasks.docs.length,\n                  });\n                  setNewTask(\"\");\n                }\n              }}\n            ></input>\n            {document.phabricatorGetEpic ? (\n              <input\n                placeholder=\"Ticket\"\n                value={ticket}\n                onChange={(e) => setTicket(e.currentTarget.value)}\n                pattern=\"T\\d+\"\n                type=\"text\"\n                onKeyPress={async (e) => {\n                  if (e.key === \"Enter\" && e.currentTarget.checkValidity()) {\n                    const tickets = await document.phabricatorGetEpic(ticket);\n                    let idx = tasks.docs.length;\n                    for (const t of tickets) {\n                      await gameDoc.collection(\"tasks\").add({\n                        name: `T${t.id}: ${t.fields.name}`,\n                        revealed: false,\n                        idx: idx++,\n                      });\n                    }\n                    setTicket(\"\");\n                  }\n                }}\n              ></input>\n            ) : null}\n          </div>\n        </div>\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            width: \"60vw\",\n            background: \"white\",\n            height: \"auto\",\n          }}\n        >\n          {activeTask ? (\n            <>\n              <h1 style={{ padding: \"38px\" }}>{activeTask.data().name}</h1>\n              <div style={{ margin: \"32px\" }}>\n                {[...game.data().deck, \"?\"].map((card) => {\n                  console.log({ card, data: scores?.data() });\n                  return (\n                    <button\n                      className={`Card ${\n                        scores &&\n                        scores.data() &&\n                        card === scores.data()[user.uid]\n                          ? \"SelectedCard\"\n                          : \"\"\n                      }`}\n                      onClick={() => {\n                        game.ref\n                          .collection(\"scores\")\n                          .doc(activeTaskId)\n                          .set(\n                            {\n                              [user.uid]: card,\n                            },\n                            { merge: true }\n                          );\n                      }}\n                    >\n                      {card}\n                    </button>\n                  );\n                })}\n              </div>\n              <div>\n                {activeTask.data().revealed &&\n                game.data().owner === user.uid ? (\n                  <div>\n                    <button\n                      onClick={() => {\n                        activeTask.ref.set(\n                          { revealed: false },\n                          { merge: true }\n                        );\n                      }}\n                      className=\"Secondary\"\n                    >\n                      Hide\n                    </button>\n                    <button\n                      disabled={taskIndex === tasks.docs.length - 1}\n                      onClick={() => {\n                        game.ref.set(\n                          { activeTask: tasks.docs[taskIndex + 1].id },\n                          { merge: true }\n                        );\n                      }}\n                    >\n                      Next\n                    </button>\n                  </div>\n                ) : (\n                  <div>\n                    <button\n                      disabled={taskIndex === tasks.docs.length - 1}\n                      onClick={() => {\n                        game.ref.set(\n                          { activeTask: tasks.docs[taskIndex + 1].id },\n                          { merge: true }\n                        );\n                      }}\n                      className=\"Secondary\"\n                    >\n                      Skip\n                    </button>\n                    <button\n                      onClick={() => {\n                        activeTask.ref.set({ revealed: true }, { merge: true });\n                        setPoints(\n                          scores\n                            ? Math.round(\n                                average(\n                                  Object.values(scores.data()).filter(\n                                    (score) => score !== \"?\"\n                                  )\n                                )\n                              )\n                            : 0\n                        );\n                      }}\n                    >\n                      Reveal\n                    </button>\n                  </div>\n                )}\n                {document.phabricatorSetPoints &&\n                activeTask &&\n                activeTask.data().name.match(/^T\\d+/) ? (\n                  <div style={{ marginTop: \"32px\" }}>\n                    <input\n                      placeholder=\"Points\"\n                      value={points}\n                      onChange={(e) => setPoints(e.currentTarget.value)}\n                    ></input>\n                    <button\n                      onClick={async () => {\n                        const p = parseInt(points);\n                        const ticketId = parseInt(\n                          activeTask.data().name.match(/^T(\\d+)/)[1]\n                        );\n                        await document.phabricatorSetPoints(ticketId, p);\n                        setPoints(\"\");\n                      }}\n                      className=\"InputButton\"\n                    >\n                      Set Points\n                    </button>\n                  </div>\n                ) : null}\n              </div>\n            </>\n          ) : (\n            <button\n              disabled={tasksLoading || !tasks.docs.length}\n              onClick={() =>\n                game.ref.set({ activeTask: tasks.docs[0].id }, { merge: true })\n              }\n            >\n              Start Game\n            </button>\n          )}\n        </div>\n        {activeTask ? (\n          <ScoreState\n            game={game}\n            user={user}\n            activeTask={activeTask}\n            members={membersLoading ? null : members}\n            scores={scores}\n          />\n        ) : null}\n      </div>\n    );\n  } else {\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          minHeight: \"100vh\",\n        }}\n      >\n        <button\n          onClick={() =>\n            gameDoc.collection(\"members\").doc(user.uid).set({\n              name: user.displayName,\n            })\n          }\n          style={{ transform: \"translateY(-100%)\", margin: \"auto\" }}\n        >\n          Join Session\n        </button>\n      </div>\n    );\n  }\n}\n\nfunction App() {\n  const [user] = useAuthState(firebase.auth());\n  const gameId = window.location.search\n    ? window.location.search.slice(1)\n    : null;\n  return (\n    <div className=\"App\">\n      {user ? (\n        gameId ? (\n          <Game id={gameId} user={user} />\n        ) : (\n          <CreateGameForm user={user} />\n        )\n      ) : (\n        <LoggedOutTemplate />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport firebase from \"firebase\";\n\nlet initialised = false;\n\nexport function initFirebase() {\n  if (initialised) {\n    return;\n  }\n  const firebaseConfig = {\n    apiKey: \"AIzaSyDd-g1pxYDd5wiI-8aRLKO7k0hpIA2ogO0\",\n    authDomain: \"planning-poker-27ef5.firebaseapp.com\",\n    databaseURL: \"https://planning-poker-27ef5.firebaseio.com\",\n    projectId: \"planning-poker-27ef5\",\n    storageBucket: \"planning-poker-27ef5.appspot.com\",\n    messagingSenderId: \"359210422354\",\n    appId: \"1:359210422354:web:32c9e1671ff01dddb68f8b\",\n  };\n\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n  initialised = true;\n}\n\ninitFirebase();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}